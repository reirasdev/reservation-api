# This workflow performs the folling tasks:
# Run tests and package app with Maven
# Build docker image
# Publish docker image on DockerHub
# Deploy app using Docker Compose on AWS EC2 instance

name: DockerHub Publish

on:
  push:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    
    - name: Run tests and package JAR file with Maven
      run: mvn -B clean package

    # We are keeping the same pattern for owner/respositoryname on both Git and Docker hubs
    # The id generated by the push command on GitHub is used to tag the images pushed to DockerHub
    # This way we have easy correlation between each GitHub and DockerHub commits 
    - name: Build Docker image
      run: docker build -t $GITHUB_REPOSITORY:$GITHUB_SHA .

    # Always store you credentials using encrypted secrets 
    - name: Log into DokerHub
      env:
        DOCKER_LOGIN: ${{ secrets.DOCKER_HUB_LOGIN }}
        DOCKER_PSWD: ${{ secrets.DOCKER_HUB_PASSWD }}
      run: echo "$DOCKER_PSWD" | docker login docker.io -u $DOCKER_LOGIN --password-stdin
    
    - name: Push Docker image to DockerHub
      run: docker push $GITHUB_REPOSITORY:$GITHUB_SHA
    
    - name: Run image on CI deploy server hosted on AWS EC2 
      uses: JimCronqvist/action-ssh@master
      with:
        hosts: '${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }}'
        privateKey: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
        command: IMAGE_TAG=$GITHUB_SHA docker-compose up -d
        # IMAGE_TAG refers to the last image tag published on DockerHub, it is passed as parameter to be used in docker-compose.yml
        # docker-compose.yml is available at repository root for conference
